---
- name: Ensure docker-compose serive is managed
  block:
    - name: Ensure {{ service.name }} dir exists
      file:
        path: "{{ docker_compose_service_remote_dir }}/{{ service.name }}"
        state: directory

    - name: Ensure git repo is up-to-date
      ansible.builtin.git:
        repo: "{{ service.repo }}"
        version: "{{ service.version | default(omit) }}"
        dest: "{{ docker_compose_service_remote_dir }}/{{ service.name }}"
        depth: 1
        accept_hostkey: yes
        recursive: yes
        update: yes
      when: service.repo is defined

    - name: Ensure {{ service.name }} project is up-to-date
      ansible.posix.synchronize:
        src: "{{ docker_compose_service_host_dir }}/{{ service.name }}/"
        dest: "{{ docker_compose_service_remote_dir }}/{{ service.name }}"
      when: service.repo is not defined

    - name: Ensure {{ service.name }} data files are synchronized
      become: true
      ansible.posix.synchronize:
        dest: "{{ item.dest }}"
        src: "{{ item.src }}"
        delete: "{{ item.delete | default(false) }}"
        rsync_opts: "{{ item.rsync_opts | default(omit) }}"
      with_items: "{{ service.synchronize }}"
      when: service.synchronize is defined

    - name: Ensure {{ service.name }} is managed
      become: true
      community.docker.docker_compose:
        project_src: "{{ docker_compose_service_remote_dir }}/{{ service.name }}"
        project_name: "{{ service.name }}"
        files: "{{ service.files | default(omit) }}"
        build: "{{ service.build | default(omit) }}"
        state: "{{ service.state }}"
        pull: "{{ service.pull | default(false) }}"
        build: "{{ service.build | default('no')}}"
        restarted: "{{ service.restarted | default('no') }}"
        recreate: "{{ service.recreate | default('smart') }}"
        remove_images: "{{ service.remove_images | default(omit) }}"
        remove_volumes: "{{ service.remove_volumes | default(omit) }}"
      environment: "{{ service.environment | default(omit)}}"

  when: (SERVICES is not defined) or (service.name in SERVICES)
